package ir.mehrdadseyfi.a7habit.action;/** * @author Nancy * @version 2.0 */import android.annotation.SuppressLint;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.net.wifi.WifiManager;import android.os.AsyncTask;import android.os.Bundle;import android.os.PowerManager;import android.preference.PreferenceManager;import android.support.v7.app.AppCompatActivity;import android.telephony.TelephonyManager;import android.util.Log;import android.view.GestureDetector;import android.view.View;import android.webkit.JavascriptInterface;import android.webkit.WebView;import android.widget.EditText;import android.widget.ListView;import java.util.Calendar;import java.util.Date;import java.util.List;import ir.mehrdadseyfi.a7habit.Calender.CalenderActivity;import ir.mehrdadseyfi.a7habit.Calender.JobDB;import ir.mehrdadseyfi.a7habit.Calender.ShowJobDayListAdapter;import ir.mehrdadseyfi.a7habit.R;import ir.mehrdadseyfi.a7habit.SquareTasksActivity;import ir.mehrdadseyfi.a7habit.Vista.VistaActivity;import ir.mehrdadseyfi.a7habit.action.service.ActivationType;import ir.mirrajabi.persiancalendar.PersianCalendarView;import ir.mirrajabi.persiancalendar.core.PersianCalendarHandler;import ir.mirrajabi.persiancalendar.core.models.PersianDate;//import ir.mehrdadseyfi.action.development.R;public class ScormPlayerActivity extends AppCompatActivity {    @SuppressWarnings("UnusedDeclaration")    private static final String TAG = "ScormPlayerActivity";    private PowerManager.WakeLock wakeLock;    private GestureDetector gestureDetector;    private ActivationManager activationManager;    private WebView webView;    private Calendar lockDate = Calendar.getInstance();    private static String deviceId = "";    private static SharedPreferences preferences = null;    private String courseName;    private String importedSerialCode;    public ActivationType activationType;    /**     * Called when the activity is first created.     */    @SuppressLint({"AddJavascriptInterface", "SetJavaScriptEnabled"})    @Override    public void onCreate(Bundle savedInstanceState) {        lockDate.set(2014, Calendar.FEBRUARY, 1);        courseName = "staff-performance-evaluation";        WifiManager m_wm = (WifiManager)getApplicationContext().getSystemService(Context.WIFI_SERVICE);        String m_wlanMacAdd = m_wm.getConnectionInfo().getMacAddress();        //TelephonyManager telephonyManager = (TelephonyManager) getApplicationContext().getSystemService(Context.TELEPHONY_SERVICE);        TelephonyManager telephonyManager = (TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);//        deviceId = telephonyManager.getDeviceId();//        if (deviceId == null || deviceId .length() == 0) {////            deviceId = Settings.Secure.getString(getApplication().getContentResolver(), Settings.Secure.ANDROID_ID);//        }        preferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());        super.onCreate(savedInstanceState);        setContentView(R.layout.main);        addtoday();        findViewById(R.id.add_21).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(ScormPlayerActivity.this, CalenderActivity.class));            }        });        activationManager = new AutomaticActivationManager(                "http://elco21.com",                "/service/api/activate",                "IMEI-" + deviceId,                courseName,                preferences);//        if (!activationManager.haveSerialCode()) {//            Log.d("Activation","dont have serial saved");//            getSerialFromUserByDialog();//        }//        else {//            Log.d("Activation","have serial saved");//            continueActivation();//        }    }    @JavascriptInterface    public void activateByInternet() {        Log.d("ACTIVATION", "Before activation: isActive>" + String.valueOf(activationManager.isActive()));        new AsyncTask<String, Void, Void>() {            private Throwable throwable;            @Override            protected Void doInBackground(String... params) {                try {                    activationManager.activate();                } catch (Throwable throwable) {                    this.throwable = throwable;                }                return null;            }            @Override            protected void onPostExecute(Void ignored) {//                if (throwable == null) {//                    if (activationManager.isActive()) {////                        webView.loadUrl("javascript:activationSuccessful()");////                    }else {//                        showErrorByDialog();//                    }//                    Log.d("ACTIVATION", "After activation: isActive>" + String.valueOf(activationManager.isActive()));//                } else {//                    throwable.printStackTrace();//                    if (new Date().getTime() > lockDate.getTime().getTime()) {//                        enforceActivation();//                    }//                }            }        }.execute();    }    @JavascriptInterface    public void activateByTel() {        Log.d("ACTIVATION", "Before activation: isActive>" + String.valueOf(activationManager.isActive()));        new AsyncTask<String, Void, Void>() {            private Throwable throwable;            @Override            protected Void doInBackground(String... params) {                try {                    activationManager.offlineActivate();                } catch (Throwable throwable) {                    this.throwable = throwable;                }                return null;            }            @Override            protected void onPostExecute(Void ignored) {                if (throwable == null) {                    if (activationManager.isActive()) {                        startActivity(new Intent(ScormPlayerActivity.this, VistaActivity.class));                    }                    else {                        showErrorByDialog();                    }                    Log.d("ACTIVATION", "After activation: isActive>" + String.valueOf(activationManager.isActive()));                } else {                    throwable.printStackTrace();                    if (new Date().getTime() > lockDate.getTime().getTime()) {                        enforceActivation();                    }                }            }        }.execute();    }    private void enforceActivation() {        new AlertDialog.Builder(this)                .setTitle("نیاز به فعال‌سازی")                .setMessage("زمان استفاده‌ی رایگان از این برنامه به پایان رسیده است. لطفاً عملیات فعال‌سازی را انجام دهید")                .setPositiveButton("خروج", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int which) {                        finish();                    }                })                .setIcon(android.R.drawable.ic_dialog_alert)                .setCancelable(false)                .show();    }    @Override    protected void onResume() {        addtoday();        super.onResume();        if (!AndroidWebServer.isAlive()) {            AndroidWebServer.start();        }    }    @Override    public void onBackPressed() {        AndroidWebServer.stop();        super.onBackPressed();    }    @JavascriptInterface    public boolean isActive() {        return activationManager.isActive();    }//    public boolean isConnectedToInternet() {//        ConnectivityManager connectivity = (ConnectivityManager) getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);//        if (connectivity != null) {//            NetworkInfo[] info = connectivity.getAllNetworkInfo();//            if (info != null)//                for (NetworkInfo anInfo : info) {//                    if (anInfo.getState() == NetworkInfo.State.CONNECTED) {//                        return true;//                    }//                }//        }//        return false;//    }    private void getSerialFromUserByDialog() {        final AlertDialog.Builder serialCodeDialog = new AlertDialog.Builder(this);        serialCodeDialog.setTitle("سریال کد");        serialCodeDialog.setMessage("لطفاً سریال کد خود را وارد کنید");        final EditText serialCodeTextEdit = new EditText(this);        serialCodeDialog.setView(serialCodeTextEdit);        serialCodeDialog.setPositiveButton("ثبت", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int which) {                importedSerialCode = serialCodeTextEdit.getText().toString().trim();                if (importedSerialCode != null && importedSerialCode.length() == 16) {                    activationManager.setSerialId(importedSerialCode);                    activationManager.setSerialCodeOfUser();                    continueActivation();                    dialog.cancel();                }                else {                    showErrorByDialog();                }            }        });        if (new Date().getTime() < lockDate.getTime().getTime()) {            serialCodeDialog.setNegativeButton("خروج", new DialogInterface.OnClickListener() {                public void onClick(final DialogInterface dialog, int which) {                    dialog.cancel();                }            });            serialCodeDialog.setCancelable(true);        }        else {            serialCodeDialog.setCancelable(false);        }        serialCodeDialog.show();    }    private void continueActivation(){        activationManager.setSerialId(activationManager.getSerialCodeOfUser());        if (!activationManager.isActive()){            if (true) {                activateByInternet();            }            else if (activationType == null){                if (activationManager.inSmsStatus()) {                    getActivationCodeFromUser();                }            }            else {                getActivationCodeFromUser();            }        }    }    private void getActivationCodeFromUser() {        final AlertDialog.Builder activationCodeDialog = new AlertDialog.Builder(this);        activationCodeDialog.setTitle("کد فعال‌سازی نرم‌افزار");        activationCodeDialog.setMessage("لطفاً کدفعال‌سازی خود را وارد کنید");        final EditText activationCodeTextEdit = new EditText(this);        activationCodeDialog.setView(activationCodeTextEdit);        activationCodeDialog.setCancelable(false);        activationCodeDialog.setPositiveButton("ثبت", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int which) {                String activationCode = activationCodeTextEdit.getText().toString().trim();                if (activationCode.trim() != null && activationCode.length() == 16) {                    activationManager.setUserActivationCode(activationCode);                    activateByTel();                    dialog.cancel();                } else {                    showErrorByDialog();                }            }        });        activationCodeDialog.show();    }    private void showErrorByDialog() {        AlertDialog.Builder errorDialog = new AlertDialog.Builder(this);        errorDialog.setTitle("کد وارد شده اشتباه می‌باشد.");        errorDialog.setMessage("لطفاً مجددا کد را وارد کنید.");        errorDialog.setIcon(android.R.drawable.ic_dialog_alert);        errorDialog.setNeutralButton("OK", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int which) {                finish();            }        });        if (new Date().getTime() < lockDate.getTime().getTime()) {            errorDialog.setNegativeButton("خروج", new DialogInterface.OnClickListener() {                public void onClick(final DialogInterface dialog, int which) {                    dialog.cancel();                }            });            errorDialog.setCancelable(true);        }        else {            errorDialog.setCancelable(false);        }        errorDialog.show();    }    public void addtoday(){        ListView mylist=(ListView)findViewById(R.id.mylist);        PersianCalendarView  calendarView = (PersianCalendarView) findViewById(R.id.persian_calendar);        PersianCalendarHandler calendarHandler; calendarHandler = calendarView.getCalendar();        PersianDate today1 = calendarHandler.getToday();        List<JobDB> models1=JobDB.find(JobDB.class,"year= ? and mount= ? and day= ?", String.valueOf(today1.getYear()),String.valueOf(today1.getMonth()),String.valueOf(today1.getDayOfMonth()));        ShowJobDayListAdapter adapter=new ShowJobDayListAdapter(models1,this);        mylist.setAdapter(adapter);    }}